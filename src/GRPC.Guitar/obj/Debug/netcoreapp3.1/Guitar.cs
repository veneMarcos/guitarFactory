// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/guitar.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GRPC.Guitar {

  /// <summary>Holder for reflection information generated from Protos/guitar.proto</summary>
  public static partial class GuitarReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/guitar.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GuitarReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNQcm90b3MvZ3VpdGFyLnByb3RvEgZndWl0YXIikgIKDUd1aXRhclJlcXVl",
            "c3QSMAoLZ3VpdGFyQ29sb3IYASABKA4yGy5ndWl0YXIuR3VpdGFyUmVxdWVz",
            "dC5Db2xvchIWCg5zdHJpbmdRdWFudGl0eRgCIAEoBRIwCgtndWl0YXJNb2Rl",
            "bBgDIAEoDjIbLmd1aXRhci5HdWl0YXJSZXF1ZXN0Lk1vZGVsIj8KBUNvbG9y",
            "EgkKBUdyZWVuEAASCQoFQmxhY2sQARIHCgNSZWQQAhIMCghTdW5idXJzdBAD",
            "EgkKBVdoaXRlEAQiRAoFTW9kZWwSEAoMU3RyYXRvY2FzdGVyEAASCwoHTGVz",
            "UGF1bBABEg4KClRlbGVjYXN0ZXIQAhIMCghBY291c3RpYxADIh8KC0d1aXRh",
            "clJlcGx5EhAKCGd1aXRhcklEGAEgASgJMkIKBkd1aXRhchI4CgpNYWtlR3Vp",
            "dGFyEhUuZ3VpdGFyLkd1aXRhclJlcXVlc3QaEy5ndWl0YXIuR3VpdGFyUmVw",
            "bHlCDqoCC0dSUEMuR3VpdGFyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPC.Guitar.GuitarRequest), global::GRPC.Guitar.GuitarRequest.Parser, new[]{ "GuitarColor", "StringQuantity", "GuitarModel" }, null, new[]{ typeof(global::GRPC.Guitar.GuitarRequest.Types.Color), typeof(global::GRPC.Guitar.GuitarRequest.Types.Model) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPC.Guitar.GuitarReply), global::GRPC.Guitar.GuitarReply.Parser, new[]{ "GuitarID" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GuitarRequest : pb::IMessage<GuitarRequest> {
    private static readonly pb::MessageParser<GuitarRequest> _parser = new pb::MessageParser<GuitarRequest>(() => new GuitarRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuitarRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPC.Guitar.GuitarReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuitarRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuitarRequest(GuitarRequest other) : this() {
      guitarColor_ = other.guitarColor_;
      stringQuantity_ = other.stringQuantity_;
      guitarModel_ = other.guitarModel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuitarRequest Clone() {
      return new GuitarRequest(this);
    }

    /// <summary>Field number for the "guitarColor" field.</summary>
    public const int GuitarColorFieldNumber = 1;
    private global::GRPC.Guitar.GuitarRequest.Types.Color guitarColor_ = global::GRPC.Guitar.GuitarRequest.Types.Color.Green;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GRPC.Guitar.GuitarRequest.Types.Color GuitarColor {
      get { return guitarColor_; }
      set {
        guitarColor_ = value;
      }
    }

    /// <summary>Field number for the "stringQuantity" field.</summary>
    public const int StringQuantityFieldNumber = 2;
    private int stringQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StringQuantity {
      get { return stringQuantity_; }
      set {
        stringQuantity_ = value;
      }
    }

    /// <summary>Field number for the "guitarModel" field.</summary>
    public const int GuitarModelFieldNumber = 3;
    private global::GRPC.Guitar.GuitarRequest.Types.Model guitarModel_ = global::GRPC.Guitar.GuitarRequest.Types.Model.Stratocaster;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GRPC.Guitar.GuitarRequest.Types.Model GuitarModel {
      get { return guitarModel_; }
      set {
        guitarModel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuitarRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuitarRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuitarColor != other.GuitarColor) return false;
      if (StringQuantity != other.StringQuantity) return false;
      if (GuitarModel != other.GuitarModel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GuitarColor != global::GRPC.Guitar.GuitarRequest.Types.Color.Green) hash ^= GuitarColor.GetHashCode();
      if (StringQuantity != 0) hash ^= StringQuantity.GetHashCode();
      if (GuitarModel != global::GRPC.Guitar.GuitarRequest.Types.Model.Stratocaster) hash ^= GuitarModel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuitarColor != global::GRPC.Guitar.GuitarRequest.Types.Color.Green) {
        output.WriteRawTag(8);
        output.WriteEnum((int) GuitarColor);
      }
      if (StringQuantity != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StringQuantity);
      }
      if (GuitarModel != global::GRPC.Guitar.GuitarRequest.Types.Model.Stratocaster) {
        output.WriteRawTag(24);
        output.WriteEnum((int) GuitarModel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuitarColor != global::GRPC.Guitar.GuitarRequest.Types.Color.Green) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GuitarColor);
      }
      if (StringQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StringQuantity);
      }
      if (GuitarModel != global::GRPC.Guitar.GuitarRequest.Types.Model.Stratocaster) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GuitarModel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuitarRequest other) {
      if (other == null) {
        return;
      }
      if (other.GuitarColor != global::GRPC.Guitar.GuitarRequest.Types.Color.Green) {
        GuitarColor = other.GuitarColor;
      }
      if (other.StringQuantity != 0) {
        StringQuantity = other.StringQuantity;
      }
      if (other.GuitarModel != global::GRPC.Guitar.GuitarRequest.Types.Model.Stratocaster) {
        GuitarModel = other.GuitarModel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GuitarColor = (global::GRPC.Guitar.GuitarRequest.Types.Color) input.ReadEnum();
            break;
          }
          case 16: {
            StringQuantity = input.ReadInt32();
            break;
          }
          case 24: {
            GuitarModel = (global::GRPC.Guitar.GuitarRequest.Types.Model) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GuitarRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Color {
        [pbr::OriginalName("Green")] Green = 0,
        [pbr::OriginalName("Black")] Black = 1,
        [pbr::OriginalName("Red")] Red = 2,
        [pbr::OriginalName("Sunburst")] Sunburst = 3,
        [pbr::OriginalName("White")] White = 4,
      }

      public enum Model {
        [pbr::OriginalName("Stratocaster")] Stratocaster = 0,
        [pbr::OriginalName("LesPaul")] LesPaul = 1,
        [pbr::OriginalName("Telecaster")] Telecaster = 2,
        [pbr::OriginalName("Acoustic")] Acoustic = 3,
      }

    }
    #endregion

  }

  public sealed partial class GuitarReply : pb::IMessage<GuitarReply> {
    private static readonly pb::MessageParser<GuitarReply> _parser = new pb::MessageParser<GuitarReply>(() => new GuitarReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuitarReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPC.Guitar.GuitarReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuitarReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuitarReply(GuitarReply other) : this() {
      guitarID_ = other.guitarID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuitarReply Clone() {
      return new GuitarReply(this);
    }

    /// <summary>Field number for the "guitarID" field.</summary>
    public const int GuitarIDFieldNumber = 1;
    private string guitarID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuitarID {
      get { return guitarID_; }
      set {
        guitarID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuitarReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuitarReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuitarID != other.GuitarID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GuitarID.Length != 0) hash ^= GuitarID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuitarID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GuitarID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuitarID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuitarID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuitarReply other) {
      if (other == null) {
        return;
      }
      if (other.GuitarID.Length != 0) {
        GuitarID = other.GuitarID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GuitarID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
